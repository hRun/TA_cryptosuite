[crypt-command]
syntax      = crypt mode=(e|d) algorithm=(rsa|aes-cbc|aes-ofb) key=<string> <field-list>
shortdesc   = Encrypt or decrypt the content of fields provided by <field-list> using <algorithm> and <key>.
description = Values of fields provided by <field-list> are encrypted or decrypted with the key provided by <key> depending on the mode set by <mode> using the algorithm specified by <algorithm>. The crypt command is an eventing command, it does not change data stored in your indexes. To index encrypted events, pipe results to the "collect" command.

example1 = search sourcetype="mail" | crypt mode=e algorithm=aes-cbc key=public.pem _raw | collect index=summary
comment1 = AES encrypt raw events of sourcetype "mail" and collect the results in a summary index.
example2 = search sourcetype="server::access" | crypt mode=d algorithm=rsa key=private.pem action, username | table _time action username
comment2 = Decrypt the RSA encrypted fields "action" and "username" and display plaintext values in a table.

usage   = public
related = eval, stats, hash, cipher, encode
tags    = crypto, encryption, decryption, rsa, aes



[hash-command]
syntax      = hash algorithm=(md5|sha1|sha224|sha256|sha384|sha512|sha3_224|sha3_256|sha3_384|sha3_512|blake2b|blake2s) (salt=<string>)? <field-list>
shortdesc   = Hash the content of fields provided by <field-list> using the algorithm specified by <algorithm>.
description = Values of fields provided by <field-list> are hashed using the algorithm specified by <algorithm>. Optionally the salt stored in <salt> is applied. MD5, SHA1 and SHA2 hashing algorithms are supported for both Python 2 and 3. SHA3 and Blake2 hashing algorithms are only supported when using Python 3 as Splunk's interpreter. The hash command is an eventing command, it does not change data stored in your indexes.

example1 = search sourcetype="apache::data" | hash algorithm=sha256 salt=secret.txt body
comment1 = Hash the content of the field "body" using SHA256 and the salt stored in secret.txt. 
           
usage   = public
related = eval, stats, crypt, cipher, encode
tags    = hash, md5, sha, sha1, sha2, sha224, sha256, sha384, sha512, sha3, sha3_224, sha3_256, sha3_384, sha3_512, blake2, blake2b, blake2s



[cipher-command]
syntax      = cipher mode=(e|d) algorithm=(rc4|rot13|rot47|xor) key=<string> <field-list>
shortdesc   = Cipher or decipher the content of fields provided by <field-list> using <algorithm> and <key>. These ciphers are generally not regarded as cryptographically secure!
description = Values of fields provided by <field-list> are ciphered or deciphered with the key provided by <key> depending on the mode set by <mode> using the algorithm specified by <algorithm>. Contrary to the "crypt" command, the algorithms implemented by this command are not regarded as cryptographically secure anymore. The cipher command is an eventing command, it does not change data stored in your indexes.

example1 = search sourcetype="powershell" | cipher mode=d algorithm=rc4 key="r4nd0m" arg2
comment1 = RC4 decrypt the field "arg2" of sourcetype "powershell".
example2 = search sourcetype="ctf" | cipher algorithm=xor key="\x2f" message | table _time alice, bob, message
comment2 = XOR the field "message" with \x2f.

usage   = public
related = eval, stats, hash, crypt, encode
tags    = crypto, cipher, encryption, decryption, rc4, rot, rot13, rot47, xor



[encode-command]
syntax      = encode mode=(to|from) encoding=(base32|base64|base85|binary|decimal|hex|octal) <field-list>
shortdesc   = Transform the content of fields provided by <field-list> using <encoding>.
description = Values of fields provided by <field-list> are transformed using the encoding method specified by <encoding>. The encode command is an eventing command, it does not change data stored in your indexes.

example1 = search sourcetype="powershell" | encode mode=from encoding=base64 arg2
comment1 = Base64 decode the field "arg2" of sourcetype "powershell".
example2 = search sourcetype="snort" | encode mode=from encoding=hex payload | table _time src_ip, dest_ip, payload
comment2 = Decode the HEX contents of "payload" and display readable ascii values in a table.

usage   = public
related = eval, stats, hash, crypt, cipher
tags    = encode, decode, format, base32, base64, base85, binary, decimal, hex, octal
